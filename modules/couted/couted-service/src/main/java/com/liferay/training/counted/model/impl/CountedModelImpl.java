/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.counted.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.training.counted.model.Counted;
import com.liferay.training.counted.model.CountedModel;
import com.liferay.training.counted.model.CountedSoap;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Counted service. Represents a row in the &quot;Counted_Counted&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CountedModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CountedImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CountedImpl
 * @generated
 */
@JSON(strict = true)
public class CountedModelImpl
	extends BaseModelImpl<Counted> implements CountedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a counted model instance should use the <code>Counted</code> interface instead.
	 */
	public static final String TABLE_NAME = "Counted_Counted";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"countedId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nome", Types.VARCHAR}, {"telefone", Types.VARCHAR},
		{"idade", Types.INTEGER}, {"email", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telefone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idade", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Counted_Counted (uuid_ VARCHAR(75) null,countedId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nome VARCHAR(75) null,telefone VARCHAR(75) null,idade INTEGER,email VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Counted_Counted";

	public static final String ORDER_BY_JPQL = " ORDER BY counted.nome ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Counted_Counted.nome ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long NOME_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Counted toModel(CountedSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Counted model = new CountedImpl();

		model.setUuid(soapModel.getUuid());
		model.setCountedId(soapModel.getCountedId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setNome(soapModel.getNome());
		model.setTelefone(soapModel.getTelefone());
		model.setIdade(soapModel.getIdade());
		model.setEmail(soapModel.getEmail());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Counted> toModels(CountedSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Counted> models = new ArrayList<Counted>(soapModels.length);

		for (CountedSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CountedModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _countedId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCountedId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _countedId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Counted.class;
	}

	@Override
	public String getModelClassName() {
		return Counted.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Counted, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Counted, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Counted, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Counted)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Counted, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Counted, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Counted)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Counted, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Counted, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Counted, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<Counted, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Counted, Object>>();

		attributeGetterFunctions.put("uuid", Counted::getUuid);
		attributeGetterFunctions.put("countedId", Counted::getCountedId);
		attributeGetterFunctions.put("groupId", Counted::getGroupId);
		attributeGetterFunctions.put("companyId", Counted::getCompanyId);
		attributeGetterFunctions.put("userId", Counted::getUserId);
		attributeGetterFunctions.put("userName", Counted::getUserName);
		attributeGetterFunctions.put("createDate", Counted::getCreateDate);
		attributeGetterFunctions.put("modifiedDate", Counted::getModifiedDate);
		attributeGetterFunctions.put("nome", Counted::getNome);
		attributeGetterFunctions.put("telefone", Counted::getTelefone);
		attributeGetterFunctions.put("idade", Counted::getIdade);
		attributeGetterFunctions.put("email", Counted::getEmail);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<Counted, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<Counted, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Counted, ?>>();

		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Counted, String>)Counted::setUuid);
		attributeSetterBiConsumers.put(
			"countedId", (BiConsumer<Counted, Long>)Counted::setCountedId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Counted, Long>)Counted::setGroupId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Counted, Long>)Counted::setCompanyId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Counted, Long>)Counted::setUserId);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Counted, String>)Counted::setUserName);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Counted, Date>)Counted::setCreateDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Counted, Date>)Counted::setModifiedDate);
		attributeSetterBiConsumers.put(
			"nome", (BiConsumer<Counted, String>)Counted::setNome);
		attributeSetterBiConsumers.put(
			"telefone", (BiConsumer<Counted, String>)Counted::setTelefone);
		attributeSetterBiConsumers.put(
			"idade", (BiConsumer<Counted, Integer>)Counted::setIdade);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Counted, String>)Counted::setEmail);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCountedId() {
		return _countedId;
	}

	@Override
	public void setCountedId(long countedId) {
		_countedId = countedId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_columnBitmask = -1L;

		_nome = nome;
	}

	@JSON
	@Override
	public String getTelefone() {
		if (_telefone == null) {
			return "";
		}
		else {
			return _telefone;
		}
	}

	@Override
	public void setTelefone(String telefone) {
		_telefone = telefone;
	}

	@JSON
	@Override
	public int getIdade() {
		return _idade;
	}

	@Override
	public void setIdade(int idade) {
		_idade = idade;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Counted.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Counted.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Counted toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Counted>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CountedImpl countedImpl = new CountedImpl();

		countedImpl.setUuid(getUuid());
		countedImpl.setCountedId(getCountedId());
		countedImpl.setGroupId(getGroupId());
		countedImpl.setCompanyId(getCompanyId());
		countedImpl.setUserId(getUserId());
		countedImpl.setUserName(getUserName());
		countedImpl.setCreateDate(getCreateDate());
		countedImpl.setModifiedDate(getModifiedDate());
		countedImpl.setNome(getNome());
		countedImpl.setTelefone(getTelefone());
		countedImpl.setIdade(getIdade());
		countedImpl.setEmail(getEmail());

		countedImpl.resetOriginalValues();

		return countedImpl;
	}

	@Override
	public int compareTo(Counted counted) {
		int value = 0;

		value = getNome().compareTo(counted.getNome());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Counted)) {
			return false;
		}

		Counted counted = (Counted)object;

		long primaryKey = counted.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Counted> toCacheModel() {
		CountedCacheModel countedCacheModel = new CountedCacheModel();

		countedCacheModel.uuid = getUuid();

		String uuid = countedCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			countedCacheModel.uuid = null;
		}

		countedCacheModel.countedId = getCountedId();

		countedCacheModel.groupId = getGroupId();

		countedCacheModel.companyId = getCompanyId();

		countedCacheModel.userId = getUserId();

		countedCacheModel.userName = getUserName();

		String userName = countedCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			countedCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			countedCacheModel.createDate = createDate.getTime();
		}
		else {
			countedCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			countedCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			countedCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		countedCacheModel.nome = getNome();

		String nome = countedCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			countedCacheModel.nome = null;
		}

		countedCacheModel.telefone = getTelefone();

		String telefone = countedCacheModel.telefone;

		if ((telefone != null) && (telefone.length() == 0)) {
			countedCacheModel.telefone = null;
		}

		countedCacheModel.idade = getIdade();

		countedCacheModel.email = getEmail();

		String email = countedCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			countedCacheModel.email = null;
		}

		return countedCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Counted, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Counted, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Counted, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Counted)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Counted, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Counted, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Counted, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Counted)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Counted>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Counted.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _countedId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nome;
	private String _telefone;
	private int _idade;
	private String _email;
	private long _columnBitmask;
	private Counted _escapedModel;

}